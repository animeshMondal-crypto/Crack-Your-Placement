#intution
clearly there is a cycle. so we will use fast and slow pointer approach
same like linkedlist to find the cycle entrance

//solution
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        //slow and fast pointer approach
        int slow = nums[0], fast = nums[0];

        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);

        //get the entrance of the cycle
        fast = nums[0];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow;
    }
};