#intution
use Knuth Morris Pratt pattern matching algorithm

//solution
class Solution {
private:
    void computeLPS(vector<int> &lps, string &needle){
        int len = 0, i = 1;
        while(i<needle.size()){
            if(needle[len] == needle[i]){
                len++;
                lps[i] = len;
                i++;
            }else{
                if(len != 0){
                    len = lps[len-1];
                }else{
                    i++;
                }
            }
        }
    }
public:
    int strStr(string haystack, string needle) {
        int n = haystack.size();
        int m = needle.size();
        vector<int> lps(m, 0);
        computeLPS(lps, needle);

        int i = 0; // index for txt[]
        int j = 0; // index for pat[]
        while (i<n && j<m) {
            if (needle[j] == haystack[i]) {
                j++;
                i++;
            }
    
            if (j == m) {
                return i-j;
            }
    
            // mismatch after j matches
            else if (i < n && needle[j] != haystack[i]) {
                // Do not match lps[0..lps[j-1]] characters,
                // they will match anyway
                if (j != 0)
                    j = lps[j - 1];
                else
                    i++;
            }
        }
        return -1;
    }
};